# -*- coding: utf-8 -*-
import sqlite3

import pandas as pd
# Form implementation generated from reading ui file 'Interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtGui import QDropEvent, QDragEnterEvent, QCursor
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtWidgets import QTableWidgetItem

from Graph import GraphWindow


class Ui_Title(object):
    def setupUi(self, Title):
        Title.setObjectName("Title")
        Title.setWindowModality(QtCore.Qt.WindowModal)
        Title.resize(1333, 942)
        Title.setStyleSheet("background-color: rgb(188, 188, 188)")
        self.centralwidget = QtWidgets.QWidget(Title)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, -20, 1351, 931))
        self.frame.setStyleSheet("background-color: rgb(188, 188, 188)")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setProperty("ddd", "")
        self.frame.setObjectName("frame")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setEnabled(True)
        self.label_2.setGeometry(QtCore.QRect(300, 10, 851, 51))
        font = QtGui.QFont()
        font.setFamily("Segoe UI Black")
        font.setPointSize(28)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setFocusPolicy(QtCore.Qt.NoFocus)
        self.label_2.setStyleSheet("")
        self.label_2.setObjectName("label_2")
        self.scrollArea = QtWidgets.QScrollArea(self.frame)
        self.scrollArea.setEnabled(True)
        self.scrollArea.setGeometry(QtCore.QRect(20, 410, 1301, 401))
        self.scrollArea.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1299, 399))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_5 = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.label_5.setEnabled(True)
        font = QtGui.QFont()
        font.setFamily("Segoe UI")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("background-color: rgb(220, 220, 220);")
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        spacerItem = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.verticalLayout.addItem(spacerItem)
        self.tableWidget = QtWidgets.QTableWidget(self.scrollAreaWidgetContents)
        self.tableWidget.setEnabled(True)
        self.tableWidget.setStyleSheet("background-color: rgb(236, 234, 234);\n"
                                       "font: 75 8pt \"MS Shell Dlg 2\";\n"
                                       " border: 1px solid black; \n"
                                       "")
        self.tableWidget.setAutoScrollMargin(16)
        self.tableWidget.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerItem)
        self.tableWidget.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(12)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(11, item)
        self.verticalLayout.addWidget(self.tableWidget)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalFrame = QtWidgets.QFrame(self.frame)
        self.verticalFrame.setEnabled(True)
        self.verticalFrame.setGeometry(QtCore.QRect(470, 120, 431, 281))
        self.verticalFrame.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.verticalFrame.setObjectName("verticalFrame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalFrame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label = QtWidgets.QLabel(self.verticalFrame)
        self.label.setEnabled(True)
        self.label.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.listWidget = QtWidgets.QListWidget(self.verticalFrame)
        self.listWidget.setEnabled(True)
        self.listWidget.setStyleSheet("background-color: rgb(235, 235, 235);\n"
                                      "border: 1px solid black;")
        self.listWidget.setObjectName("listWidget")
        self.verticalLayout_2.addWidget(self.listWidget)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalFrame)
        self.pushButton_2.setEnabled(True)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 27))
        self.pushButton_2.setStyleSheet("font: 87 11pt \"Arial\";\n"
                                        "background-color: rgb(69, 255, 84);\n"
                                        "border: 1.5px solid black;\n"
                                        "font-weight: 600;")
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout_2.addWidget(self.pushButton_2)
        self.widget_3 = QtWidgets.QWidget(self.frame)
        self.widget_3.setEnabled(True)
        self.widget_3.setGeometry(QtCore.QRect(20, 233, 441, 171))
        self.widget_3.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.label_4 = QtWidgets.QLabel(self.widget_3)
        self.label_4.setEnabled(True)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_5.addWidget(self.label_4)
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.radioButton_4 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_4.setEnabled(True)
        self.radioButton_4.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.radioButton_4.setObjectName("radioButton_4")
        self.gridLayout_2.addWidget(self.radioButton_4, 0, 0, 1, 1)
        self.radioButton_3 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_3.setEnabled(True)
        self.radioButton_3.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.radioButton_3.setObjectName("radioButton_3")
        self.gridLayout_2.addWidget(self.radioButton_3, 1, 0, 1, 1)
        self.radioButton = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton.setEnabled(True)
        self.radioButton.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.radioButton.setObjectName("radioButton")
        self.gridLayout_2.addWidget(self.radioButton, 1, 1, 1, 1)
        self.radioButton_6 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_6.setEnabled(True)
        self.radioButton_6.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.radioButton_6.setObjectName("radioButton_6")
        self.gridLayout_2.addWidget(self.radioButton_6, 2, 1, 1, 1)
        self.radioButton_5 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_5.setEnabled(True)
        self.radioButton_5.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.radioButton_5.setObjectName("radioButton_5")
        self.gridLayout_2.addWidget(self.radioButton_5, 2, 0, 1, 1)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.radioButton_2 = QtWidgets.QRadioButton(self.widget_3)
        self.radioButton_2.setEnabled(True)
        self.radioButton_2.setStyleSheet("font: 75 10pt \"MS Shell Dlg 2\";")
        self.radioButton_2.setObjectName("radioButton_2")
        self.verticalLayout_3.addWidget(self.radioButton_2)
        self.dateEdit = QtWidgets.QDateEdit(self.widget_3)
        self.dateEdit.setEnabled(True)
        self.dateEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2023, 1, 1), QtCore.QTime(0, 0, 0)))
        self.dateEdit.setTime(QtCore.QTime(0, 0, 0))
        self.dateEdit.setMaximumDateTime(QtCore.QDateTime(QtCore.QDate(9999, 12, 30), QtCore.QTime(23, 59, 59)))
        self.dateEdit.setCalendarPopup(True)
        self.dateEdit.setObjectName("dateEdit")
        self.verticalLayout_3.addWidget(self.dateEdit)
        self.gridLayout_2.addLayout(self.verticalLayout_3, 0, 1, 1, 1)
        self.verticalLayout_5.addLayout(self.gridLayout_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget_3)
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 27))
        self.pushButton_3.setStyleSheet("font: 87 11pt \"Arial\";\n"
                                        "gridline-color: rgb(100, 79, 69);\n"
                                        "background-color: rgb(69, 255, 84);\n"
                                        "border: 1.5px solid black;\n"
                                        "font-weight: 600;")
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout_5.addWidget(self.pushButton_3)
        self.widget_2 = QtWidgets.QWidget(self.frame)
        self.widget_2.setGeometry(QtCore.QRect(910, 240, 411, 161))
        self.widget_2.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.widget = QtWidgets.QWidget(self.widget_2)
        self.widget.setEnabled(True)
        self.widget.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.widget.setObjectName("widget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setEnabled(True)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setMaximumSize(QtCore.QSize(234, 16777215))
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);\n"
                                    "border: 1px solid black;")
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setEnabled(True)
        self.pushButton.setMinimumSize(QtCore.QSize(120, 27))
        self.pushButton.setStyleSheet("font: 87 11pt \"Arial\";\n"
                                      "background-color: rgb(69, 255, 84);\n"
                                      "border: 1.5px solid black;\n"
                                      "font-weight: 600;")
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout_4.addWidget(self.widget)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.checkBox_3 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_3.setEnabled(True)
        self.checkBox_3.setChecked(True)
        self.checkBox_3.setObjectName("checkBox_3")
        self.gridLayout.addWidget(self.checkBox_3, 0, 1, 1, 1)
        self.checkBox_5 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_5.setEnabled(True)
        self.checkBox_5.setChecked(True)
        self.checkBox_5.setObjectName("checkBox_5")
        self.gridLayout.addWidget(self.checkBox_5, 1, 0, 1, 1)
        self.checkBox_11 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_11.setEnabled(True)
        self.checkBox_11.setChecked(True)
        self.checkBox_11.setObjectName("checkBox_11")
        self.gridLayout.addWidget(self.checkBox_11, 3, 1, 1, 1)
        self.checkBox_2 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_2.setEnabled(True)
        self.checkBox_2.setChecked(True)
        self.checkBox_2.setObjectName("checkBox_2")
        self.gridLayout.addWidget(self.checkBox_2, 3, 0, 1, 1)
        self.checkBox_6 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_6.setEnabled(True)
        self.checkBox_6.setChecked(True)
        self.checkBox_6.setObjectName("checkBox_6")
        self.gridLayout.addWidget(self.checkBox_6, 0, 2, 1, 1)
        self.checkBox_10 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_10.setEnabled(True)
        self.checkBox_10.setChecked(True)
        self.checkBox_10.setObjectName("checkBox_10")
        self.gridLayout.addWidget(self.checkBox_10, 0, 0, 1, 1)
        self.checkBox_8 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_8.setEnabled(True)
        self.checkBox_8.setChecked(True)
        self.checkBox_8.setObjectName("checkBox_8")
        self.gridLayout.addWidget(self.checkBox_8, 2, 2, 1, 1)
        self.checkBox_4 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_4.setEnabled(True)
        self.checkBox_4.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.checkBox_4.setChecked(True)
        self.checkBox_4.setObjectName("checkBox_4")
        self.gridLayout.addWidget(self.checkBox_4, 1, 1, 1, 1)
        self.checkBox_7 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_7.setEnabled(True)
        self.checkBox_7.setChecked(True)
        self.checkBox_7.setObjectName("checkBox_7")
        self.gridLayout.addWidget(self.checkBox_7, 1, 2, 1, 1)
        self.checkBox = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox.setEnabled(True)
        self.checkBox.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        self.gridLayout.addWidget(self.checkBox, 2, 0, 1, 1)
        self.checkBox_12 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_12.setEnabled(True)
        self.checkBox_12.setChecked(True)
        self.checkBox_12.setObjectName("checkBox_12")
        self.gridLayout.addWidget(self.checkBox_12, 3, 2, 1, 1)
        self.checkBox_9 = QtWidgets.QCheckBox(self.widget_2)
        self.checkBox_9.setEnabled(True)
        self.checkBox_9.setChecked(True)
        self.checkBox_9.setObjectName("checkBox_9")
        self.gridLayout.addWidget(self.checkBox_9, 2, 1, 1, 1)
        self.verticalLayout_4.addLayout(self.gridLayout)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.frame)
        self.scrollArea_2.setGeometry(QtCore.QRect(20, 810, 1301, 111))
        self.scrollArea_2.setStyleSheet("background-color: rgb(216, 216, 216);")
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 1299, 109))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents_2)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_6 = QtWidgets.QLabel(self.scrollAreaWidgetContents_2)
        self.label_6.setStyleSheet("")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        self.textBrowser = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_2)
        self.textBrowser.setStyleSheet("background-color: rgb(236, 234, 234);\n"
                                       " border: 2px solid black;\n"
                                       "")
        self.textBrowser.setObjectName("textBrowser")
        self.horizontalLayout_2.addWidget(self.textBrowser)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        Title.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(Title)
        self.statusbar.setObjectName("statusbar")
        Title.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(Title)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1333, 21))
        self.menuBar.setStyleSheet("background-color: rgb(194, 194, 194) ")
        self.menuBar.setObjectName("menuBar")
        self.menuSettings = QtWidgets.QMenu(self.menuBar)
        self.menuSettings.setStyleSheet("background-color: rgb(199, 226, 255)")
        self.menuSettings.setObjectName("menuSettings")
        Title.setMenuBar(self.menuBar)
        self.actionSave = QtWidgets.QAction(Title)
        self.actionSave.setObjectName("actionSave")
        self.actionQuit = QtWidgets.QAction(Title)
        self.actionQuit.setObjectName("actionQuit")
        self.menuSettings.addAction(self.actionSave)
        self.menuSettings.addSeparator()
        self.menuSettings.addAction(self.actionQuit)
        self.menuBar.addAction(self.menuSettings.menuAction())

        self.retranslateUi(Title)
        QtCore.QMetaObject.connectSlotsByName(Title)

    def retranslateUi(self, Title):
        _translate = QtCore.QCoreApplication.translate
        Title.setWindowTitle(_translate("Title", "FinTrack Home"))
        self.label_2.setText(_translate("Title",
                                        "<html><head/><body><p align=\"center\"><span style=\" color:#009294;\">F</span><span style=\" color:#004343;\">in</span><span style=\" color:#006868;\">T</span><span style=\" color:#003232;\">rack</span><span style=\" color:#009294;\"/><span style=\" color:#ffffff;\">- </span><span style=\" color:#467dff;\">A</span><span style=\" color:#f9f9f9;\">N</span><span style=\" color:#45c0f9;\">Z </span><span style=\" color:#020608;\">Bank Statement Analysis Tool</span></p></body></html>"))
        self.label_5.setText(_translate("Title",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; color:#0d0d0d;\">Your Purchase History</span></p></body></html>"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Title", "Transaction Date"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Title", "Processed Date"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Title", "Transaction Type"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Title", "Details"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Title", "Particulars"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Title", "Code"))
        item = self.tableWidget.horizontalHeaderItem(6)
        item.setText(_translate("Title", "Reference"))
        item = self.tableWidget.horizontalHeaderItem(7)
        item.setText(_translate("Title", "Amount"))
        item = self.tableWidget.horizontalHeaderItem(8)
        item.setText(_translate("Title", "Balance"))
        item = self.tableWidget.horizontalHeaderItem(9)
        item.setText(_translate("Title", "To/From Account"))
        item = self.tableWidget.horizontalHeaderItem(10)
        item.setText(_translate("Title", "Conversion Charge"))
        item = self.tableWidget.horizontalHeaderItem(11)
        item.setText(_translate("Title", "Foreign Currency"))
        self.label.setText(_translate("Title",
                                      "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt; font-weight:600; color:#15008f;\">Drop Bank Statement</span></p><p align=\"center\"><span style=\" font-size:12pt; color:#15008f;\">(Supported: .xlsx)</span></p></body></html>"))
        self.pushButton_2.setText(_translate("Title", "Submit"))

        self.label_4.setText(_translate("Title",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; font-weight:600;\">Data Visualiaztion</span></p></body></html>"))
        self.radioButton_4.setText(_translate("Title", "Top Spending Categories"))
        self.radioButton_3.setText(_translate("Title", "Transaction Trends"))
        self.radioButton.setText(_translate("Title", "Top Payment Methods"))
        self.radioButton_6.setText(_translate("Title", "Delayed Transaction Trends"))
        self.radioButton_5.setText(_translate("Title", "Balance Changes"))
        self.radioButton_2.setText(_translate("Title", "Monthly Transactions"))
        self.dateEdit.setDisplayFormat(_translate("Title", "MM/yyyy"))
        self.pushButton_3.setText(_translate("Title", "Display Graph"))
        self.label_3.setText(_translate("Title",
                                        "<html><head/><body><p align=\"right\"><span style=\" font-size:10pt; font-weight:600;\">Search:</span></p></body></html>"))
        self.pushButton.setText(_translate("Title", "View Results"))
        self.checkBox_3.setText(_translate("Title", "Particulars"))
        self.checkBox_5.setText(_translate("Title", "P. Date"))
        self.checkBox_11.setText(_translate("Title", "Amount"))
        self.checkBox_2.setText(_translate("Title", "Details"))
        self.checkBox_6.setText(_translate("Title", "Balance"))
        self.checkBox_10.setText(_translate("Title", "T. Date"))
        self.checkBox_8.setText(_translate("Title", "Coversion Charge"))
        self.checkBox_4.setText(_translate("Title", "Code"))
        self.checkBox_7.setText(_translate("Title", "To/From Account"))
        self.checkBox.setText(_translate("Title", "T. Type"))
        self.checkBox_12.setText(_translate("Title", "Foreign Currency "))
        self.checkBox_9.setText(_translate("Title", "References"))
        self.label_6.setText(_translate("Title",
                                        "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600;\">Logs:</span></p></body></html>"))
        self.menuSettings.setTitle(_translate("Title", "File"))
        self.actionSave.setText(_translate("Title", "Save "))
        self.actionQuit.setText(_translate("Title", "Quit"))

        self.activate_features()


    def __init__(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = GraphWindow()
        self.ui.setupUi(self.window)
        # Create an in-memory SQLite database
        self.conn = sqlite3.connect(':memory:')
        self.results = None

    def activate_features(self):
        self.press_submit()
        self.press_display_graph()
        self.control_table_columns()
        self.control_file_drag_drop()
        self.button_hover_hand_effect()
        self.search_button_activate()
        self.play_music()


    def play_music(self):
        self.media_player = QMediaPlayer()
        self.media_player.setMedia(QMediaContent(QUrl.fromLocalFile("music.mp3")))
        self.media_player.play()

    def button_hover_hand_effect(self):
        self.pushButton.setCursor(QCursor(Qt.PointingHandCursor))
        self.pushButton_2.setCursor(QCursor(Qt.PointingHandCursor))
        self.pushButton_3.setCursor(QCursor(Qt.PointingHandCursor))


    def search_button_activate(self):
        self.pushButton.clicked.connect(self.press_search_button)


    def press_search_button(self):
        search_term = self.lineEdit.text().strip()
        if (search_term == ''):
            self.textBrowser.append('<font color="red"><b>Error: Enter a search term.</b></font>')
        else:
            self.query_filter_table(search_term)




    def press_display_graph(self):
        self.pushButton_3.clicked.connect(self.control_radio_buttons)

    def control_radio_buttons(self):
        if self.radioButton_4.isChecked():
            self.query_spending_all_file()
            self.open_window("tsc")
        elif self.radioButton.isChecked():
            self.query_top_payment_methods()
            self.open_window("tpm")
        elif self.radioButton_2.isChecked():
            self.query_monthly_spending()
            self.open_window("ms")
        elif self.radioButton_3.isChecked():
            self.query_transaction_trends_all_time()
            self.open_window("tt")
        elif self.radioButton_5.isChecked():
            self.query_balance_changes_over_time()
            self.open_window("bc")
        elif self.radioButton_6.isChecked():
            self.query_delayed_transaction_trends()
            self.open_window("dtt")


    def open_window(self, radiobtn):

        if (radiobtn == "tsc") and (self.results is not None):
            self.ui.display_pie_chart("tsc", self.results)

        elif (radiobtn == "tpm") and (self.results is not None):
            self.ui.display_pie_chart("tpm", self.results)

        elif (radiobtn == "ms") and (self.results is not None):
            selected_date = self.dateEdit.date().toPyDate()
            selected_month_year = selected_date.strftime("%Y-%m")
            self.ui.display_pie_chart("ms", self.results, selected_month_year)

        elif (radiobtn == "tt") and (self.results is not None):
            self.ui.display_random_chart("tt", self.results)

        elif (radiobtn == "bc") and (self.results is not None):
            self.ui.display_line_plot("bc", self.results)

        elif (radiobtn == "dtt") and (self.results is not None):
            self.ui.display_line_plot("dtt", self.results)

        self.window.show()


    def press_submit(self):
        self.pushButton_2.clicked.connect(self.submit_button_clicked)

    def control_file_drag_drop(self):
        # Enable drag and drop
        self.listWidget.setAcceptDrops(True)
        self.listWidget.setDropIndicatorShown(True)
        # Connect the drag and drop signals
        self.listWidget.dragEnterEvent = self.dragEnterEvent
        self.listWidget.dragMoveEvent = self.dragMoveEvent
        self.listWidget.dropEvent = self.dropEvent

    def control_table_columns(self):
        checkBoxList = [self.checkBox_10, self.checkBox_5, self.checkBox, self.checkBox_2
            , self.checkBox_3, self.checkBox_4, self.checkBox_9, self.checkBox_11,
                        self.checkBox_6, self.checkBox_7, self.checkBox_8, self.checkBox_12]

        for i, check_box in enumerate(checkBoxList):
            check_box.clicked.connect(lambda state, index=i: self.toggle_column(state, index))

    def dragEnterEvent(self, event: QDragEnterEvent):
        mime_data = event.mimeData()
        if mime_data.hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event: QDropEvent):
        mime_data = event.mimeData()
        if mime_data.hasUrls():
            urls = mime_data.urls()
            for url in urls:
                if url.isLocalFile():
                    self.listWidget.addItem(url.toLocalFile())

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            event.setDropAction(Qt.CopyAction)
            event.accept()
        else:
            event.ignore()

    def read_and_connect(self, path):
        # Read Excel data into a DataFrame
        df = pd.read_excel(path)
        # df['Item Type'] = df['Code'].apply(self.classify_transaction)
        df.to_sql('my_table', self.conn, index=False)


    def read_and_load_uploaded_file(self):
        selected_item = self.listWidget.currentItem()
        if selected_item:
            file_path = selected_item.text()
            self.read_and_connect(file_path)

    def submit_button_clicked(self):
        if self.listWidget.count() == 0:
            self.textBrowser.append('<font color="red"><b>Error: Please add a valid ANZ excel file.</b></font>')
        elif not self.listWidget.selectedItems():
            self.textBrowser.append('<font color="red"><b>Error: Now please select the file you want to assess.</b></font>')
        else:
            self.read_and_load_uploaded_file()
            self.query_load_table()
            self.populate_table(self.results)

    def query_load_table(self):
        # Run SQL queries using pandas and SQLite
        query = '''SELECT * FROM my_table'''
        self.results = pd.read_sql_query(query, self.conn)


    def query_filter_table(self, search_text):
        if (search_text == ''):
            self.textBrowser.append("Error: Enter a search query.")
        else:
            for row in range(self.tableWidget.rowCount()):
                row_text = " ".join(
                    [self.tableWidget.item(row, col).text() for col in range(self.tableWidget.columnCount())])
                if search_text.lower() in row_text.lower():
                    self.tableWidget.setRowHidden(row, False)
                else:
                    self.tableWidget.setRowHidden(row, True)






    def query_delayed_transaction_trends(self):
        query = '''SELECT strftime('%Y-%m', `Transaction Date`) AS YearMonth, COUNT(*) AS Count
                       FROM my_table
                       WHERE `Processed Date` IS NOT NULL
                       AND strftime('%Y-%m', `Transaction Date`) != strftime('%Y-%m', `Processed Date`)
                       GROUP BY YearMonth
                       ORDER BY YearMonth;
                '''
        self.results = pd.read_sql_query(query, self.conn)


    def query_balance_changes_over_time(self):
        query = '''SELECT strftime('%Y-%m', `Transaction Date`) AS YearMonth,
                       AVG(Balance) AS AverageBalance
                   FROM my_table
                   GROUP BY YearMonth
                   ORDER BY YearMonth;
                '''
        self.results = pd.read_sql_query(query, self.conn)


    def query_top_payment_methods(self):
        print("Pressed!!")
        query = '''SELECT Type, COUNT(Type) AS TotalTypes
                       FROM my_table
                       GROUP BY Type
                       ORDER BY TotalTypes DESC
                       LIMIT 10;'''
        self.results = pd.read_sql_query(query, self.conn)


    def query_spending_all_file(self):
        query = '''SELECT Code, COUNT(*) AS TotalCount, SUM(Amount) AS TotalAmount
                                FROM my_table
                                WHERE Amount < 0
                                GROUP BY Code
                                ORDER BY TotalAmount
                                LIMIT 10;
                '''
        self.results = pd.read_sql_query(query, self.conn)
        for i, row in self.results.iterrows():
            print(row)


    def query_monthly_spending(self):
        selected_date = self.dateEdit.date().toPyDate()
        selected_month_year = selected_date.strftime("%Y-%m")
        query = f'''SELECT Code, COUNT(*) AS TotalCount, SUM(Amount) AS TotalAmount
                        FROM my_table
                        WHERE strftime('%Y-%m', `Transaction Date`) = '{selected_month_year}'
                        AND Amount < 0
                        GROUP BY Code
                        ORDER BY TotalAmount
                        LIMIT 10;
                    '''
        self.results = pd.read_sql_query(query, self.conn)


    def query_transaction_trends_all_time(self):
        query = '''SELECT strftime('%Y-%m', `Transaction Date`) AS YearMonth,
                           SUM(Amount) AS TotalAmount
                    FROM my_table
                    WHERE Amount < 0 
                    GROUP BY YearMonth
                    ORDER BY YearMonth
                    LIMIT 10;
                '''
        self.results = pd.read_sql_query(query, self.conn)
        print(self.results.to_string(index=False))


    # Function to classify transactions
    def classify_transaction(self, code):
        # Your classification logic here
        # Return the corresponding item type based on the code
        # Example:
        category_mapping = {
            'KFC': 'Food',
            'Mcdo': 'Food',
            'Uber': 'Transportation',
            'Pak N Save': 'Groceries',
            'Caltex': 'Fuel',
            'Transfer': 'Transfer',
            # Add more keywords and their respective categories
        }
        for key, value in category_mapping.items():
            if key.lower() in code.lower():
                return value
        return '-'

    def toggle_column(self, state, col):
        if (state == True):
            self.tableWidget.setColumnHidden(col, False)  # 2 corresponds to Checked state
        else:
            self.tableWidget.setColumnHidden(col, True)  # 2 corresponds to Checked state


    def display_monthly_expenditures(self):
        selected_item = self.listWidget.currentItem()
        if selected_item:
            file_path = selected_item.text()
            self.read_and_connect(file_path)
            query = '''SELECT "Code", COUNT(*) AS CodeCount
                FROM my_table
                GROUP BY "Code"
                ORDER BY CodeCount DESC
                LIMIT 12
            '''
            self.results = pd.read_sql_query(query, self.conn)

    def populate_table(self, results):
        # Set the table widget dimensions
        num_rows, num_cols = results.shape
        self.tableWidget.setRowCount(num_rows)
        self.tableWidget.setColumnCount(num_cols)

        # Populate the QTableWidget
        for row_idx, row_data in enumerate(results.values):
            for col_idx, cell_data in enumerate(row_data):
                if (col_idx == 0 or col_idx == 1) and (cell_data is not None):
                    cell_data = cell_data.split()[0]

                item = QTableWidgetItem(str(cell_data))
                item.setTextAlignment(Qt.AlignCenter)
                self.tableWidget.setItem(row_idx, col_idx, item)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Title = QtWidgets.QMainWindow()
    ui = Ui_Title()
    ui.setupUi(Title)
    Title.show()
    sys.exit(app.exec_())
